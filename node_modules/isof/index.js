

var toStr = Object.prototype.toString;


function of(arg){
    /\[object (.*?)\]/.test(toStr.call(arg));
    return RegExp.$1.toLowerCase();
}

function is(...args){
    if(!args.length){
        return console.error("is() require a argment");
    }

    let first = args[0];
    if (args.length === 1) {
        return {
            of(...arr){
                if(!arr.length) return is.of(first);
                if(!is(arr[0], 'string')) {
                    return console.error(`.of("xxx") expect a string,but got a ${typeof second}`);
                }
                return is(first, arr[0], true);
            },
            typeof(...arr){
                if(!arr.length) return is.typeof(first);
                if(!is(arr[0], 'string')) {
                    return console.error(`.typeof("xxx") expect a string,but got a ${typeof second}`);
                }
                return is(first, arr[0]);
            }
        }
    }
    
    let second = args[1];
    if (typeof second != "string"){
        return console.error(`is() expect a string as second argment,but got a ${typeof second}`)
    }
    second = second.toLowerCase();
    if (args.length === 2){
        return typeof first === second || (toStr.call(first).toLowerCase() === `[object ${second}]`);
    }

    let three = args[2];
    if (args.length === 3 && three === true) {
        return toStr.call(second).toLowerCase() === `[object ${second}]`;
    } else {
        return is(...args.slice(0, 2));
    }
}

is.typeof = function (arg){
    return typeof arg;
}

is.of = of;

module.exports = is;

